version: '3'
networks:
  jam:
services:
  coturn:
    image: coturn/coturn:alpine
    volumes:
      - "./turnserver.conf:/etc/coturn/turnserver.conf"
    network_mode: host
    restart: unless-stopped
    ports:
      - "3478:3478/udp" # STUN/TURN UDP
      - "3478:3478/tcp" # STUN/TURN TCP
      - "3479:3479/udp" # STUN/TURN UDP Alt port (RFC5780 support)
      - "3479:3479/tcp" # STUN/TURN TCP Alt port (RFC5780 support)
      - "5349:5349/udp" # STUN/TURN DTLS
      - "5349:5349/tcp" # STUN/TURN TLS
      - "5350:5350/udp" # STUN/TURN DTLS Alt port (RFC5780 support)
      - "5350:5350/tcp" # STUN/TURN TLS Alt port (RFC5780 support)
      - "49152:65535/udp" # UDP media ports for TURN relay    
    profiles: ["coturn"]
  prometheus:
    networks:
      - jam
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=1y'
    restart: unless-stopped
    profiles: [ "metrics" ]
  grafana:
    networks:
      - jam
    image: grafana/grafana
    user: "472"
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD}"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_ROOT_URL: "https://${JAM_HOST}/_/grafana"
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
    restart: unless-stopped
    labels:
      - traefik.http.routers.grafana.rule=(Host(`${JAM_HOST}`) && PathPrefix(`/_/grafana`))
      - traefik.http.routers.grafana.tls=true
#      - traefik.http.routers.grafana.tls.certresolver=letsencrypt
      - traefik.enable=true
    profiles: [ "metrics" ]
  ui:
    networks:
      - jam
    image: cornychat/ui:${CHANNEL}
    restart: unless-stopped
    environment:
      - ADS
      - DEFAULT_AVATAR
      - GAME
      - GIF_SEARCH_ENABLED
      - JAM_BROADCAST
      - JAM_HOST
      - JAM_STUN_SERVER
      - JAM_TURN_SERVER
      - JAM_TURN_SERVER_USERNAME
      - JAM_TURN_SERVER_CREDENTIAL
      - JAM_RESTRICT_ROOM_CREATION
      - JAM_SFU
      - JAM_HIDE_JAM_INFO
      - RELAYS_GENERAL
      - RELAYS_ZAPGOALS
      - SERVER_FAVICON
      - SERVER_IMAGE
      - SERVER_LOGO
      - SERVER_NAME
      - SERVER_OPERATOR
      - SERVER_PROFILE_LUD16
      - SLACK_CLIENT_ID
      - SLACK_CLIENT_SECRET
      - SLACK_API_URL
      - SUBSCRIPTIONS_ENABLED
    labels:
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_ui.rule=Host(`${JAM_HOST}`)
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_ui.tls=true
#      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_ui.tls.certresolver=letsencrypt
      - traefik.enable=true
    volumes:
      - "../jam-config:/jam-config"
  pantryredis:
    networks:
      jam:
        aliases:
          - pantryredis
    image: library/redis
    volumes:
      - "../data/pantryredis:/data"
    restart: unless-stopped
    command: "redis-server --appendonly yes"
  backupredis:
    depends_on:
      - pantryredis
    image: cornychat/s3backup
    #build: ../s3backup
    #image: peterrus/s3-cron-backup
    environment:
      - AWS_ACCESS_KEY_ID=${BACKUP_AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${BACKUP_AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_URL=s3://${BACKUP_AWS_S3_BUCKET}/cornychat-backups-dev/pantryredis
      - AWS_DEFAULT_REGION=${BACKUP_AWS_REGION}
      - CRON_SCHEDULE=58 */2 * * * # run every 2 hours
      - BACKUP_NAME=pantryredis
    volumes: # use :ro to make sure volume gets mounted read only
      - ../data/pantryredis:/data/pantryredis:ro
    restart: unless-stopped
    profiles: [ "backup" ]
  pantry-sfu:
    #build: ../pantry-sfu
    #image: registry.gitlab.com/jam-systems/jam/pantry-sfu:${CHANNEL}
    image: cornychat/pantry-sfu:${CHANNEL}
    restart: unless-stopped
    network_mode: host
    depends_on:
      - pantry
    environment:
      - HLS_FILE_LOCATION_PATH
      - JAM_DISTRIBUTION_HOST
      - JAM_HOST
      - JAM_SFU_EXTERNAL_IP
      - MEDIASOUP_MIN_PORT
      - MEDIASOUP_MAX_PORT
      - RECORD_FILE_LOCATION_PATH
    profiles: [ "sfu" ]
    volumes:
      - ../data/recordings:/pantry-sfu/records
      - ../data/hls:/pantry-sfu/hls
  pantry:
    networks:
      jam:
        aliases:
          - pantry
    #build: ../pantry
    image: cornychat/pantry:${CHANNEL}
    restart: unless-stopped
    depends_on:
      - pantryredis
    environment:
      - ADS
      - CHAT_AD_FILE_LOCATION_PATH
      - GAME
      - GAME_SCORE_UPDATE_INTERVAL
      - GIF_SEARCH_ENABLED
      - GIF_SEARCH_ENDPOINT
      - GIF_SEARCH_APIKEY
      - HLS_FILE_LOCATION_PATH
      - JAM_HOST
      - JAM_RESTRICT_ROOM_CREATION
      - LIVE_ACTIVITIES_UPDATE_INTERVAL
      - LNBITS_HOST
      - RECORD_FILE_LOCATION_PATH
      - RECORD_FILE_RETENTION_DAYS
      - RECURRING_EVENTS_UPDATE_INTERVAL
      - RELAYS_ACL
      - RELAYS_GENERAL
      - RELAYS_POOL_PER_WRITE
      - RELAYS_ZAPGOALS
      - SCHEDULED_EVENTS_UPDATE_INTERVAL
      - SERVER_NAME
      - SERVER_NSEC
      - SERVER_PROFILE_ABOUT
      - SERVER_PROFILE_PICTURE
      - SERVER_PROFILE_BANNER
      - SERVER_PROFILE_LUD16
      - SERVER_PROFILE_NIP05
      - SERVER_ZAP_GOAL_UPDATE_INTERVAL
      - SQUARE_AD_FILE_LOCATION_PATH
      - SUBSCRIPTIONS_ENABLED
      - SUBSCRIPTIONS_WALLET_API_KEY
      - SUBSCRIPTIONS_TIERS_OFFERED
      - SUBSCRIPTIONS_RATES_OFFERED
      - SUBSCRIPTIONS_TIER_0_RATE_PER_DAY
      - SUBSCRIPTIONS_TIER_0_RATE_PER_MONTH
      - SUBSCRIPTIONS_TIER_0_RATE_PER_YEAR
    labels:
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_pantry.rule=(Host(`${JAM_HOST}`) && PathPrefix(`/_/pantry`))
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_pantry.middlewares=${COMPOSE_PROJECT_NAME}_pantry_stripprefix
      - traefik.http.middlewares.${COMPOSE_PROJECT_NAME}_pantry_stripprefix.stripprefix.prefixes=/_/pantry
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_pantry.tls=true
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_nip05.rule=(Host(`${JAM_HOST}`) && PathPrefix(`/.well-known/nostr.json`))
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_nip05.tls=true
      - traefik.enable=true
    volumes:
      - "../jam-config:/jam-config"
      - ../data/recordings:/pantry/records
      - ../data/hls:/pantry/hls
      - ../data/adimages:/pantry/adimages
      - ../data/adimages2:/pantry/adimages2
  traefik:
    networks:
      jam:
        aliases:
          - ${JAM_HOST}
          - ${LNBITS_HOST}
    hostname: traefik
    image: traefik
    restart: unless-stopped
    command:
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--entryPoints.metrics.address=:8080"
#      - "--certificatesResolvers.letsencrypt.acme.email=admin@${JAM_HOST}"
#      - "--certificatesResolvers.letsencrypt.acme.storage=/acme/acme.json"
#      - "--certificatesResolvers.letsencrypt.acme.httpChallenge.entryPoint=web"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
    labels:
      - "traefik.http.routers.http-catchall.rule=Host(`${JAM_HOST}`) || Host(`${LNBITS_HOST}`) || HostRegexp(`{subdomain:[az0-9]+}.${JAM_HOST}`)"
      - traefik.http.routers.http-catchall.entrypoints=web
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https@docker
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.enable=true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ../data/traefik/acme:/acme
    profiles: [ "web" ]
  lnbits:
    networks:
      - jam
    image: lnbits/lnbits:0.12.10
    labels:
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_lnbits.rule=Host(`${LNBITS_HOST}`)
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_lnbits.tls=true
#      - traefik.http.routers.${COMPOSE_PROJECT_NAME}_lnbits.tls.certresolver=letsencrypt
      - traefik.enable=true
    volumes:
      - ../data/lnbits:/app/data
      - ./lnbits/.env:/app/.env
      - ./lnbits/tls.crt:/app/tls.crt
      - ./lnbits/lnbits.macaroon:/app/lnbits.macaroon
    ports:
      - "5000:5000"
    restart: unless-stopped
    profiles: [ "lnbits" ]
  backuplnbits:
    depends_on:
      - lnbits
    image: cornychat/s3backup
    #build: ../s3backup
    #image: peterrus/s3-cron-backup
    environment:
      - AWS_ACCESS_KEY_ID=${BACKUP_AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${BACKUP_AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_URL=s3://${BACKUP_AWS_S3_BUCKET}/cornychat-backups-dev/lnbits
      - AWS_DEFAULT_REGION=${BACKUP_AWS_REGION}
      - CRON_SCHEDULE=14 */2 * * * # run every 2 hours
      - BACKUP_NAME=lnbits
    volumes: # use :ro to make sure volume gets mounted read only
      - ../data/lnbits:/data/lnbits:ro
    restart: unless-stopped
    profiles: [ "backup" ]
volumes:
  prometheus_data: {}
  grafana_data: {}
  recordings: {}
