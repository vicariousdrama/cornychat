<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0">
    <meta http-equiv="pragma" content="no-cache">    
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta property="og:title" content="<%= metaInfo.ogTitle %>" />
    <meta property="og:description" content="<%= metaInfo.ogDescription %>" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="<%= metaInfo.ogUrl %>" />
    <meta property="og:image" content="<%= metaInfo.ogImage %>" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="shortcut icon" type="image/png" href="<%= metaInfo.favIcon %>" />
    <link rel="apple-touch-icon" href="<%= metaInfo.favIcon %>" />
    <link href="/css/tailwind.css" rel="stylesheet" />
    <link href="/css/main.css" rel="stylesheet" />
    <link rel="manifest" href="<%= metaInfo.ogUrl %>/manifest.json">
    <link
            rel="alternate"
            type="application/json+oembed"
            href="<%= urls.jam %>/_/integrations/oembed?url=<%= metaInfo.ogUrl %>"
    >
    <title><%= metaInfo.ogTitle %></title>
</head>
<body>
<div id="slide" style="position:absolute;top:0px;z-index:15;width:100%;"></div>
<div id="root"></div>
<script>
    const thed = new Date();
    const sleep = ms => new Promise(r => setTimeout(r, ms));
    const gametime = 1752624000; // 2025-07-16
    const gameok = gametime < Math.floor(thed.getTime()/1000);
    window.jamConfig = <%- jamConfigString %>;
    window.existingRoomInfo = <%- roomInfoString %>;
    window.existingRoomId = <%- roomIdString %>;
    window.gameEnabled = gameok;

    const animationsEnabled = localStorage.getItem('animationsEnabled') ?? 'true';

    // Always get the latest build date
    var ts = Math.floor(Date.now() / 1000);
    var script_builddate = document.createElement('script');
    script_builddate.id = "script_builddate";
    script_builddate.src = "/builddate.js?ts=" + ts;
    script_builddate.type = "text/javascript";
    script_builddate.async = "false";
    script_builddate.defer = "false";
    document.head.appendChild(script_builddate);
    // Once builddate has loaded, we can reliably get the other resources in a deterministic way
    script_builddate.onload = function(){
        sessionStorage.setItem('builddate', builddate);

        var link_app = document.createElement('link');
        link_app.rel = "modulepreload";
        link_app.href = "/js/App.js?bd=" + builddate;
        link_app.as = "script";
        document.head.appendChild(link_app);

        var link_chunk = document.createElement('link');
        link_chunk.rel = "modulepreload";
        link_chunk.href = "/js/<%= preloadScript %>?bd=" + builddate;
        link_chunk.as = "script";
        document.head.appendChild(link_chunk);

        var script_app = document.createElement('script');
        script_app.id = "script_app";
        script_app.src = "/js/App.js?bd=" + builddate;
        script_app.type = "module";
        document.head.appendChild(script_app);

        var script_slide = document.createElement('script');
        script_slide.id = "script_slide";
        script_slide.src = "/slide.js?bd=" + builddate;
        script_slide.type = "text/javascript";
        document.head.appendChild(script_slide);

        var script_points = document.createElement('script');
        script_points.id = "script_slide";
        script_points.src = "/points.js?bd=" + builddate;
        script_points.type = "text/javascript";
        document.head.appendChild(script_points);
        
        var script_jquery = document.createElement('script');
        script_jquery.id = "script_jquery";
        script_jquery.src = "https://code.jquery.com/jquery-3.6.0.min.js";
        document.head.appendChild(script_jquery);
    }
    
    if (thed.getMonth() == 11 || thed.getMonth() == 0) {
        var script_snowflakes = document.createElement('script');
        script_snowflakes.setAttribute('src','https://unpkg.com/magic-snowflakes/dist/snowflakes.min.js');
        document.head.appendChild(script_snowflakes);
    }
    function linkCSS(u) {
        var link_css = document.createElement('link');
        link_css.setAttribute('href', u);
        link_css.setAttribute('rel', 'stylesheet');
        document.head.appendChild(link_css);
    }
    let animInterval = undefined;
    let animFlakes = undefined;
    function load_animation() {
        let yr = thed.getFullYear();
        let mn = thed.getMonth();
        let dn = thed.getDate();

        try {
            setInterval(reportPoints, 62498);
        } catch(e) {/*ignore*/}

        // Valentines
        if (dn == 14 && mn == 1) {
            linkCSS('/css/hearts.css');
            animInterval = setInterval(makeHearts, 1500);
            return;
        }

        // Russia
        if (dn == 24 && mn == 1) {
            linkCSS('/css/corns.css');
            animInterval = setInterval(makeRussia, 1550);
            return;
        }

        // March 3s and 17
        if (mn == 2 && [3,13,17,23].includes(dn)) {
            linkCSS('/css/leprechauns.css');
            animInterval = setInterval(makeLeprechaun, 1317);
            return;
        }

        // April First
        if (dn == 1 && mn == 3) {
            if(Math.found(Math.random() * 100) < 2) {
                linkCSS('/css/corns.css');
                animInterval = setInterval(makeUnicorn, 250);
                return;
            }
            if(Math.found(Math.random() * 100) < 69) {
                grayit();
                return;
            }
            if(Math.round(Math.random() * 10) > 7) {
                flipit();
                return;
            }
        }

        // Pizza day
        if (dn == 22 && mn == 4) {
            linkCSS('/css/corns.css');
            animInterval = setInterval(makePizza, 2100);
            return;            
        }

        // USA! USA!
        if (dn == 4 && mn == 6) {
            linkCSS('/css/corns.css');
            animInterval = setInterval(makeUSA, 1976);
            return;
        }

        // Nostrbama
        if (dn >= 14 && dn <= 17 && mn == 6 && yr == 2025) {
            linkCSS('/css/nostrs.css');
            animInterval = setInterval(makeNostrbama, 1714);
            return;
        }

        // Corn Days
        if ([12,13,14].includes(dn)) {
            linkCSS('/css/corns.css');
            animInterval = setInterval(makeCorn, 1388);
            return;
        }

        // Snow during December + January
        if ([0,11].includes(mn)) {
            animFlakes = new Snowflakes({color: "#d7c1f9",minOpacity: 0.4,maxOpacity: 0.8,maxSize:50,speed:3});
            return;
        }

        // At all other times .. make food 
        if (gameok && window.jamConfig.game) {
            linkCSS('/css/corns.css');
            animInterval = setInterval(makeFood, 3888);
            return;
        }

    }
    function stop_animation() {
        try {
            if (animInterval) clearInterval(animInterval);
            if (animFlakes) animFlakes.destroy();
            if (document.getElementById('root').classList.contains('flipdiv')) document.getElementById('root').classList.remove("flipdiv");
        } catch(animerr) {
            // ignore
        }
    }
    if (animationsEnabled == 'true') {
        if(window.addEventListener) {
            window.addEventListener('load', load_animation, false);
        } else {
            window.attachEvent('load', load_animation);
        }
    }
    function makeCorn() {
        makeAnim('🌽', 'corn');
    }
    function makeFood() {
        const className = 'corn';
        switch (Math.round(Math.random() * 8)) {
            case 0: makeAnim('🥨', className); break;
            case 1: makeAnim('🍿', className); break;
            case 2: makeAnim('🍟', className); break;
            case 3: makeAnim('🍕', className); break;
            case 4: makeAnim('🌭', className); break;
            case 5: makeAnim('🌮', className); break;
            case 6: makeAnim('🍭', className); break;
            case 7: makeAnim('🍫', className); break;
        }
    }
    function makeHearts() {
        const className = 'heart';
        switch (Math.round(Math.random() * 3)) {
            case 0: makeAnim('🌹', className); break;
            case 1: makeAnim('💗', className); break;
            case 2: makeAnim('Happy Valentines Day', className); break;
        }
    }
    function makeLeprechaun(t, s) {
        const className = 'leprechaun';
        switch (Math.round(Math.random() * 4)) {
            case 0: makeAnim('🍀', className); break;
            case 1: makeAnimImage('/img/emojis/leprechaun.png', 'leprechaun'); break;
            case 2: makeAnim('☘️', className); break;
            case 3: makeAnim('🇮🇪', className); break;
        }
    }
    function makeNostrbama() {
        const className = 'nostr';
        switch (Math.round(Math.random() * 2)) {
            case 0: makeAnim('🍷', className); break;
            case 1: makeAnim('𓅦', className); break;
            case 2: makeAnim('🎉', className); break;
            case 3: makeAnim('NOSTRBAMA!!!', className); break;
        }
    }
    function makePizza() {
        const className = 'pizza';
        switch (Math.round(Math.random() * 2)) {
            case 0: makeAnim('🍕', className); break;
            case 1: makeAnim('Bitcoin Pizza Day', className); break;
        }
    }
    function makeRussia() {
        makeAnim('🇷🇺','corn');
    }
    function makeUSA() {
        switch (Math.round(Math.random() * 3)) {
            case 0: makeAnim('🇺🇸','corn'); break;
            case 1: makeAnim('🗽','corn'); break;
            case 2: makeAnim('💵','corn'); break;
        }
    }
    function makeUnicorn() {
        makeAnim('🦄','corn');
    }
    function makeAnim(t, className) {
        const c = document.createElement('div');
        c.classList.add(className);
        c.style.left = Math.random() * 100 + "vw";
        c.style.animationDuration = Math.random() * 2 + 3 + "s";
        c.innerText = t;
        if(gameok && window.jamConfig.game) {
            makeAnimOnClick(c);
        }
        document.body.appendChild(c);
        setTimeout(() => {if (c) c.remove();}, 5000);
    }
    function makeAnimImage(i, className) {
        const c = document.createElement('div');
        c.classList.add(className);
        c.style.left = Math.random() * 100 + "vw";
        c.style.animationDuration = Math.random() * 2 + 3 + "s";
        const im = document.createElement('img');
        let a1 = document.createAttribute('src');
        a1.value = i;
        im.setAttributeNode(a1);
        let a2 = document.createAttribute('width');
        a2.value = '64';
        im.setAttributeNode(a2); 
        c.appendChild(im);
        //makeAnimOnClick(c);
        document.body.appendChild(c);
        setTimeout(() => {if (c) c.remove();}, 5000);
    }
    function flipit() {
        document.getElementById('root').classList.add("flipdiv");
        window.scrollTo(0, document.body.scrollHeight);
    }
    function grayit() {
        document.getElementsByTagName('body')[0].style.filter = 'grayscale(1)';
    }

</script>
</body>
</html>
