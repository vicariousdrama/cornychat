#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('pantry:server');
const http = require('http');
const {addWebsocket} = require('../services/ws');
const {setupCleaner} = require('../services/fileCleaner');
const {serverProfileInitializer} = require('../services/serverProfileInitializer');
const {scheduleUpdater} = require('../services/scheduleUpdater');
const {recurringEventsUpdater} = require('../services/recurringEventsUpdater');
const {nip05Initializer} = require('../services/nip05Initializer');
const {liveEventUpdater} = require('../services/liveEventUpdater');
const {zapGoalUpdater} = require('../services/zapGoalUpdater');
const {grantPubkeysForRoomsToRelays, revokeAllUserPubkeys} = require('../relayacl/relayACL');
const {revokeDisconnectedUsers} = require('../relayacl/relayACLCleanup');
const {removeDuplicatePubkeys} = require('../relayacl/relayACLCleanup');
const {highScoreUpdater} = require('../services/highScoreUpdater');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
addWebsocket(server)
setupCleaner().then(() => 'Cleaner started.');
serverProfileInitializer().then(() => 'Server Profile Initialized.');
scheduleUpdater().then(() => 'Schedule Updater started.');
recurringEventsUpdater().then(() => 'Recurring Events Updater started.');
nip05Initializer().then(() => 'NIP05 Initialized.');
liveEventUpdater().then(() => 'Live Event Updater started.');
zapGoalUpdater().then(() => 'Zap Goal Updater started.');
highScoreUpdater().then(() => 'High Score Updater started.');
revokeAllUserPubkeys().then(() => 'Initiated removal of user pubkeys from relay acl.');
grantPubkeysForRoomsToRelays().then(() => 'Initiated granting of room pubkeys from redis to relay acl.');
revokeDisconnectedUsers().then(() => 'Background removal of user pubkeys from relay acl started.')
removeDuplicatePubkeys().then(() => 'Deduplicating pubkeys from relay acls.');


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
